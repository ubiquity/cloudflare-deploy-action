name: "Continuous Deployment to Cloudflare Pages"
description: "Deploy to Cloudflare Pages"

inputs:
  repository:
    description: 'The GitHub repository to deploy, in the format "organization/repository"'
    required: true
  production_branch:
    description: "Production Branch"
    required: true
  build_artifact_name:
    description: "Github artifact name of the build output file"
    required: true
  output_directory:
    description: "Output Directory"
    required: true
  current_branch:
    description: "Compare if not production branch for preview deploys"
    required: true
  cloudflare_account_id:
    description: "Cloudflare account id"
    required: true
  cloudflare_api_token:
    description: "Cloudflare API token"
    required: true
  commit_sha:
    description: "Commit SHA for posting the deployment link"
    required: true
  workflow_run_id:
    description: "Workflow run id which called the action, used for fetching the build artifact"
    required: true
  statics_directory:
    description: "Directory that contains static files"
    required: false
  app_id:
    description: "GitHub App ID"
    required: false
  app_private_key:
    description: "GitHub App Private Key"
    required: false

runs:
  using: "composite"
  steps:
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20.19.4

    - name: Get GitHub App token
      if: inputs.app_id != '' && inputs.app_private_key != '' # Only attempt to authenticate if `app_id` and `app_private_key` are provided
      uses: actions/create-github-app-token@v1
      id: get_installation_token
      with:
        app-id: ${{ inputs.app_id }}
        private-key: ${{ inputs.app_private_key }}

    - name: Find associated pull request
      id: pr
      uses: actions/github-script@v7
      with:
        github-token: ${{ steps.get_installation_token.outputs.token || github.token }}
        script: |
          const response = await github.rest.search.issuesAndPullRequests({
            q: 'repo:${{ inputs.repository }} is:pr sha:${{ inputs.commit_sha }}',
            per_page: 1,
          })
          const items = response.data.items
          if (items.length < 1) {
            console.error('No PRs found')
            return {forcePreviewDeploy: false, pullRequestNumber: null }
          }
          const pullRequestNumber = items[0].number
          const forcePreviewDeploy = pullRequestNumber > 0  && items[0].pull_request.merged_at == null
          console.info("Pull request number is", pullRequestNumber)
          console.info("forcePreviewDeploy", forcePreviewDeploy)
          return {forcePreviewDeploy: forcePreviewDeploy, pullRequestNumber: pullRequestNumber }

    - name: Download build artifact
      uses: actions/download-artifact@v4
      with:
        name: ${{ inputs.build_artifact_name }}
        path: ${{ inputs.output_directory }}
        run-id: ${{ inputs.workflow_run_id }}

    - name: Deploy to Cloudflare
      run: bash ../../_actions/ubiquity/cloudflare-deploy-action/main/.github/cloudflare-deploy.sh "${{ inputs.repository }}" "${{ inputs.production_branch }}" "${{ inputs.output_directory }}" "${{ fromJSON(steps.pr.outputs.result).forcePreviewDeploy && format('{0}/{1}', github.repository_owner, inputs.current_branch) || inputs.current_branch }}" "${{ inputs.statics_directory }}"
      shell: bash
      env:
        CLOUDFLARE_ACCOUNT_ID: ${{ inputs.cloudflare_account_id }}
        CLOUDFLARE_API_TOKEN: ${{ inputs.cloudflare_api_token }}

    - name: Post Deployment on Pull Request or Commit
      shell: bash
      run: |
        cd ../../_actions/ubiquity/cloudflare-deploy-action/main
        yarn
        yarn tsx src/index.ts \
        --deployment_output "${{ env.DEPLOYMENT_OUTPUT }}" \
        --repository "${{ inputs.repository }}" \
        --pull_request_number "${{ fromJSON(steps.pr.outputs.result).pullRequestNumber }}" \
        --commit_sha "${{ inputs.commit_sha }}"
